### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type AuthPayload {
  token: String!
  user: User!
}

enum Category {
  ABSTRACT
  FLORAL
  INDIAN
  LANDSCAPE
  PORTRAIT
}

input CollectionCreateManyWithoutUsersInput {
  connect: [CollectionWhereUniqueInput!]
  create: [CollectionCreateWithoutUsersInput!]
}

input CollectionCreateWithoutUsersInput {
  createdAt: DateTime
  name: String!
  updatedAt: DateTime
  works: WorkCreateManyWithoutCollectionInput
}

input CollectionWhereUniqueInput {
  id: Int
}

scalar DateTime

input ImageCreateManyWithoutWorkInput {
  connect: [ImageWhereUniqueInput!]
  create: [ImageCreateWithoutWorkInput!]
}

input ImageCreateWithoutWorkInput {
  createdAt: DateTime
  height: Int
  name: String!
  updatedAt: DateTime
  url: String!
  width: Int
}

input ImageWhereUniqueInput {
  id: Int
}

type Mutation {
  createOneUser(data: UserCreateInput!): User!
  login(password: String, username: String): AuthPayload!
  register(email: String, password: String, username: String): AuthPayload!
}

input PhoneCreateManyWithoutProfileInput {
  connect: [PhoneWhereUniqueInput!]
  create: [PhoneCreateWithoutProfileInput!]
}

input PhoneCreateWithoutProfileInput {
  number: String!
  type: PhoneType
}

enum PhoneType {
  COMPANY
  MOBILE
  PERSONAL
  WORK
}

input PhoneWhereUniqueInput {
  id: Int
}

type Profile {
  companyName: String
  id: Int!
  user: User!
  userId: Int!
  website: String
}

input ProfileCreateOneWithoutUserInput {
  connect: ProfileWhereUniqueInput
  create: ProfileCreateWithoutUserInput
}

input ProfileCreateWithoutUserInput {
  companyName: String
  phone: PhoneCreateManyWithoutProfileInput
  updatedAt: DateTime
  website: String
}

input ProfileWhereUniqueInput {
  id: Int
}

type Query {
  me: User
  profile(where: ProfileWhereUniqueInput!): Profile
}

enum Role {
  ADMIN
  USER
}

enum Type {
  MIXED
  PAINTING
  SCULPTURE
}

type User {
  email: String!
  id: Int!
  name: String
  profile: Profile
  role: Role!
}

input UserCreateInput {
  collections: CollectionCreateManyWithoutUsersInput
  createdAt: DateTime
  email: String!
  name: String
  password: String
  profile: ProfileCreateOneWithoutUserInput
  role: Role
  updatedAt: DateTime
}

input WorkCreateManyWithoutCollectionInput {
  connect: [WorkWhereUniqueInput!]
  create: [WorkCreateWithoutCollectionInput!]
}

input WorkCreateWithoutCollectionInput {
  catalogId: Int!
  category: Category!
  createdAt: DateTime
  date: DateTime
  dimensions: String
  image: ImageCreateManyWithoutWorkInput
  medium: String
  price: Float
  published: Boolean!
  title: String!
  type: Type
  updatedAt: DateTime
}

input WorkWhereUniqueInput {
  id: Int
}
