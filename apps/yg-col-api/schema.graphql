### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type AuthPayload {
  token: String!
  user: User!
}

input BooleanFilter {
  equals: Boolean
  not: Boolean
}

enum Category {
  ABSTRACT
  FLORAL
  INDIAN
  LANDSCAPE
  PORTRAIT
}

type Collection {
  id: Int!
  name: String!
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, skip: Int, where: UserWhereInput): [User!]!
  workOrder(after: WorkOrderWhereUniqueInput, before: WorkOrderWhereUniqueInput, first: Int, last: Int, skip: Int): [WorkOrder!]!
  works(after: WorkWhereUniqueInput, before: WorkWhereUniqueInput, first: Int, last: Int, skip: Int): [Work!]!
}

input CollectionFilter {
  every: CollectionWhereInput
  none: CollectionWhereInput
  some: CollectionWhereInput
}

input CollectionWhereInput {
  AND: [CollectionWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  name: StringFilter
  NOT: [CollectionWhereInput!]
  OR: [CollectionWhereInput!]
  updatedAt: NullableDateTimeFilter
  users: UserFilter
  workOrder: WorkOrderFilter
  works: WorkFilter
}

input CollectionWhereUniqueInput {
  id: Int
  name: String
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

type Image {
  height: Int
  id: Int!
  name: String!
  url: String!
  width: Int
  workId: Int!
}

input ImageFilter {
  every: ImageWhereInput
  none: ImageWhereInput
  some: ImageWhereInput
}

input ImageWhereInput {
  AND: [ImageWhereInput!]
  createdAt: DateTimeFilter
  height: NullableIntFilter
  id: IntFilter
  name: StringFilter
  NOT: [ImageWhereInput!]
  OR: [ImageWhereInput!]
  updatedAt: NullableDateTimeFilter
  url: StringFilter
  width: NullableIntFilter
  work: WorkWhereInput
  workId: IntFilter
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type Mutation {
  login(password: String, username: String): AuthPayload!
  register(email: String, name: String, password: String): AuthPayload!
}

input NullableDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input NullableFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: Float
  notIn: [Float!]
}

input NullableIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type Phone {
  id: Int!
  number: String!
  profile: Profile!
  profileId: Int!
  type: PhoneType!
}

input PhoneFilter {
  every: PhoneWhereInput
  none: PhoneWhereInput
  some: PhoneWhereInput
}

enum PhoneType {
  COMPANY
  MOBILE
  PERSONAL
  WORK
}

input PhoneWhereInput {
  AND: [PhoneWhereInput!]
  id: IntFilter
  NOT: [PhoneWhereInput!]
  number: StringFilter
  OR: [PhoneWhereInput!]
  profile: ProfileWhereInput
  profileId: IntFilter
  type: PhoneType
}

type Profile {
  companyName: String
  id: Int!
  user: User!
  userId: Int!
  website: String
}

input ProfileWhereInput {
  AND: [ProfileWhereInput!]
  companyName: NullableStringFilter
  companyRole: NullableStringFilter
  id: IntFilter
  NOT: [ProfileWhereInput!]
  OR: [ProfileWhereInput!]
  phone: PhoneFilter
  updatedAt: NullableDateTimeFilter
  user: UserWhereInput
  userId: IntFilter
  website: NullableStringFilter
}

type Query {
  me: User
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, skip: Int): [User!]!
}

enum Role {
  ADMIN
  MANAGER
  SUPER
  USER
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

enum Type {
  MIXED
  PAINTING
  SCULPTURE
}

type User {
  collections(after: CollectionWhereUniqueInput, before: CollectionWhereUniqueInput, first: Int, last: Int, skip: Int): [Collection!]!
  display: String
  email: String!
  id: Int!
  profile: Profile
  role: Role!
  username: String!
}

input UserFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  collections: CollectionFilter
  createdAt: DateTimeFilter
  display: NullableStringFilter
  email: StringFilter
  id: IntFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  password: StringFilter
  profile: ProfileWhereInput
  role: Role
  updatedAt: NullableDateTimeFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  email: String
  id: Int
  username: String
}

type Work {
  catalogId: Int!
  category: Category!
  collections(after: CollectionWhereUniqueInput, before: CollectionWhereUniqueInput, first: Int, last: Int, skip: Int): [Collection!]!
  date: DateTime
  dimensions: String
  id: Int!
  medium: String
  price: Float
  title: String!
  type: Type!
  workOrder(after: WorkOrderWhereUniqueInput, before: WorkOrderWhereUniqueInput, first: Int, last: Int, skip: Int): [WorkOrder!]!
}

input WorkFilter {
  every: WorkWhereInput
  none: WorkWhereInput
  some: WorkWhereInput
}

type WorkOrder {
  collection: Collection!
  collectionId: Int!
  order: Int!
  work: Work!
  workId: Int!
}

input WorkOrderFilter {
  every: WorkOrderWhereInput
  none: WorkOrderWhereInput
  some: WorkOrderWhereInput
}

input WorkOrderWhereInput {
  AND: [WorkOrderWhereInput!]
  collection: CollectionWhereInput
  collectionId: IntFilter
  id: IntFilter
  NOT: [WorkOrderWhereInput!]
  OR: [WorkOrderWhereInput!]
  order: IntFilter
  work: WorkWhereInput
  workId: IntFilter
}

input WorkOrderWhereUniqueInput {
  collectionId: Int
  id: Int
}

input WorkWhereInput {
  AND: [WorkWhereInput!]
  catalogId: IntFilter
  category: Category
  collections: CollectionFilter
  createdAt: DateTimeFilter
  date: NullableDateTimeFilter
  dimensions: NullableStringFilter
  id: IntFilter
  image: ImageFilter
  medium: NullableStringFilter
  NOT: [WorkWhereInput!]
  OR: [WorkWhereInput!]
  price: NullableFloatFilter
  published: BooleanFilter
  title: StringFilter
  type: Type
  updatedAt: NullableDateTimeFilter
  workOrder: WorkOrderFilter
}

input WorkWhereUniqueInput {
  catalogId: Int
  id: Int
}
